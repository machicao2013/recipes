// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobufrpc.proto

#ifndef PROTOBUF_protobufrpc_2eproto__INCLUDED
#define PROTOBUF_protobufrpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_protobufrpc_2eproto();
void protobuf_AssignDesc_protobufrpc_2eproto();
void protobuf_ShutdownFile_protobufrpc_2eproto();

class Rpc;
class Request;
class Error;
class Response;

// ===================================================================

class Rpc : public ::google::protobuf::Message {
public:
    Rpc();
    virtual ~Rpc();

    Rpc(const Rpc& from);

    inline Rpc& operator=(const Rpc& from) {
        CopyFrom(from);
        return *this;
    }

    inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
        return _unknown_fields_;
    }

    inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
        return &_unknown_fields_;
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const Rpc& default_instance();

    void Swap(Rpc* other);

    // implements Message ----------------------------------------------

    Rpc* New() const;
    void CopyFrom(const ::google::protobuf::Message& from);
    void MergeFrom(const ::google::protobuf::Message& from);
    void CopyFrom(const Rpc& from);
    void MergeFrom(const Rpc& from);
    void Clear();
    bool IsInitialized() const;

    int ByteSize() const;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input);
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const;
    ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
    int GetCachedSize() const { return _cached_size_; }
private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const;
public:

    ::google::protobuf::Metadata GetMetadata() const;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated .Request request = 1;
    inline int request_size() const;
    inline void clear_request();
    static const int kRequestFieldNumber = 1;
    inline const ::Request& request(int index) const;
    inline ::Request* mutable_request(int index);
    inline ::Request* add_request();
    inline const ::google::protobuf::RepeatedPtrField< ::Request >&
        request() const;
    inline ::google::protobuf::RepeatedPtrField< ::Request >*
        mutable_request();

    // repeated .Response response = 2;
    inline int response_size() const;
    inline void clear_response();
    static const int kResponseFieldNumber = 2;
    inline const ::Response& response(int index) const;
    inline ::Response* mutable_response(int index);
    inline ::Response* add_response();
    inline const ::google::protobuf::RepeatedPtrField< ::Response >&
        response() const;
    inline ::google::protobuf::RepeatedPtrField< ::Response >*
        mutable_response();

    // @@protoc_insertion_point(class_scope:Rpc)
private:

    ::google::protobuf::UnknownFieldSet _unknown_fields_;

    ::google::protobuf::RepeatedPtrField< ::Request > request_;
    ::google::protobuf::RepeatedPtrField< ::Response > response_;

    mutable int _cached_size_;
    ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

    friend void  protobuf_AddDesc_protobufrpc_2eproto();
    friend void protobuf_AssignDesc_protobufrpc_2eproto();
    friend void protobuf_ShutdownFile_protobufrpc_2eproto();

    void InitAsDefaultInstance();
    static Rpc* default_instance_;
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message {
public:
    Request();
    virtual ~Request();

    Request(const Request& from);

    inline Request& operator=(const Request& from) {
        CopyFrom(from);
        return *this;
    }

    inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
        return _unknown_fields_;
    }

    inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
        return &_unknown_fields_;
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const Request& default_instance();

    void Swap(Request* other);

    // implements Message ----------------------------------------------

    Request* New() const;
    void CopyFrom(const ::google::protobuf::Message& from);
    void MergeFrom(const ::google::protobuf::Message& from);
    void CopyFrom(const Request& from);
    void MergeFrom(const Request& from);
    void Clear();
    bool IsInitialized() const;

    int ByteSize() const;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input);
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const;
    ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
    int GetCachedSize() const { return _cached_size_; }
private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const;
public:

    ::google::protobuf::Metadata GetMetadata() const;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // required string method = 1;
    inline bool has_method() const;
    inline void clear_method();
    static const int kMethodFieldNumber = 1;
    inline const ::std::string& method() const;
    inline void set_method(const ::std::string& value);
    inline void set_method(const char* value);
    inline void set_method(const char* value, size_t size);
    inline ::std::string* mutable_method();
    inline ::std::string* release_method();
    inline void set_allocated_method(::std::string* method);

    // optional bytes serialized_request = 2;
    inline bool has_serialized_request() const;
    inline void clear_serialized_request();
    static const int kSerializedRequestFieldNumber = 2;
    inline const ::std::string& serialized_request() const;
    inline void set_serialized_request(const ::std::string& value);
    inline void set_serialized_request(const char* value);
    inline void set_serialized_request(const void* value, size_t size);
    inline ::std::string* mutable_serialized_request();
    inline ::std::string* release_serialized_request();
    inline void set_allocated_serialized_request(::std::string* serialized_request);

    // optional uint32 id = 3;
    inline bool has_id() const;
    inline void clear_id();
    static const int kIdFieldNumber = 3;
    inline ::google::protobuf::uint32 id() const;
    inline void set_id(::google::protobuf::uint32 value);

    // @@protoc_insertion_point(class_scope:Request)
private:
    inline void set_has_method();
    inline void clear_has_method();
    inline void set_has_serialized_request();
    inline void clear_has_serialized_request();
    inline void set_has_id();
    inline void clear_has_id();

    ::google::protobuf::UnknownFieldSet _unknown_fields_;

    ::std::string* method_;
    ::std::string* serialized_request_;
    ::google::protobuf::uint32 id_;

    mutable int _cached_size_;
    ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

    friend void  protobuf_AddDesc_protobufrpc_2eproto();
    friend void protobuf_AssignDesc_protobufrpc_2eproto();
    friend void protobuf_ShutdownFile_protobufrpc_2eproto();

    void InitAsDefaultInstance();
    static Request* default_instance_;
};
// -------------------------------------------------------------------

class Error : public ::google::protobuf::Message {
public:
    Error();
    virtual ~Error();

    Error(const Error& from);

    inline Error& operator=(const Error& from) {
        CopyFrom(from);
        return *this;
    }

    inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
        return _unknown_fields_;
    }

    inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
        return &_unknown_fields_;
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const Error& default_instance();

    void Swap(Error* other);

    // implements Message ----------------------------------------------

    Error* New() const;
    void CopyFrom(const ::google::protobuf::Message& from);
    void MergeFrom(const ::google::protobuf::Message& from);
    void CopyFrom(const Error& from);
    void MergeFrom(const Error& from);
    void Clear();
    bool IsInitialized() const;

    int ByteSize() const;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input);
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const;
    ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
    int GetCachedSize() const { return _cached_size_; }
private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const;
public:

    ::google::protobuf::Metadata GetMetadata() const;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // required sint32 code = 1;
    inline bool has_code() const;
    inline void clear_code();
    static const int kCodeFieldNumber = 1;
    inline ::google::protobuf::int32 code() const;
    inline void set_code(::google::protobuf::int32 value);

    // optional string text = 2;
    inline bool has_text() const;
    inline void clear_text();
    static const int kTextFieldNumber = 2;
    inline const ::std::string& text() const;
    inline void set_text(const ::std::string& value);
    inline void set_text(const char* value);
    inline void set_text(const char* value, size_t size);
    inline ::std::string* mutable_text();
    inline ::std::string* release_text();
    inline void set_allocated_text(::std::string* text);

    // @@protoc_insertion_point(class_scope:Error)
private:
    inline void set_has_code();
    inline void clear_has_code();
    inline void set_has_text();
    inline void clear_has_text();

    ::google::protobuf::UnknownFieldSet _unknown_fields_;

    ::std::string* text_;
    ::google::protobuf::int32 code_;

    mutable int _cached_size_;
    ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

    friend void  protobuf_AddDesc_protobufrpc_2eproto();
    friend void protobuf_AssignDesc_protobufrpc_2eproto();
    friend void protobuf_ShutdownFile_protobufrpc_2eproto();

    void InitAsDefaultInstance();
    static Error* default_instance_;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message {
public:
    Response();
    virtual ~Response();

    Response(const Response& from);

    inline Response& operator=(const Response& from) {
        CopyFrom(from);
        return *this;
    }

    inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
        return _unknown_fields_;
    }

    inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
        return &_unknown_fields_;
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const Response& default_instance();

    void Swap(Response* other);

    // implements Message ----------------------------------------------

    Response* New() const;
    void CopyFrom(const ::google::protobuf::Message& from);
    void MergeFrom(const ::google::protobuf::Message& from);
    void CopyFrom(const Response& from);
    void MergeFrom(const Response& from);
    void Clear();
    bool IsInitialized() const;

    int ByteSize() const;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input);
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const;
    ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
    int GetCachedSize() const { return _cached_size_; }
private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const;
public:

    ::google::protobuf::Metadata GetMetadata() const;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // optional bytes serialized_response = 1;
    inline bool has_serialized_response() const;
    inline void clear_serialized_response();
    static const int kSerializedResponseFieldNumber = 1;
    inline const ::std::string& serialized_response() const;
    inline void set_serialized_response(const ::std::string& value);
    inline void set_serialized_response(const char* value);
    inline void set_serialized_response(const void* value, size_t size);
    inline ::std::string* mutable_serialized_response();
    inline ::std::string* release_serialized_response();
    inline void set_allocated_serialized_response(::std::string* serialized_response);

    // optional .Error error = 2;
    inline bool has_error() const;
    inline void clear_error();
    static const int kErrorFieldNumber = 2;
    inline const ::Error& error() const;
    inline ::Error* mutable_error();
    inline ::Error* release_error();
    inline void set_allocated_error(::Error* error);

    // required uint32 id = 3;
    inline bool has_id() const;
    inline void clear_id();
    static const int kIdFieldNumber = 3;
    inline ::google::protobuf::uint32 id() const;
    inline void set_id(::google::protobuf::uint32 value);

    // @@protoc_insertion_point(class_scope:Response)
private:
    inline void set_has_serialized_response();
    inline void clear_has_serialized_response();
    inline void set_has_error();
    inline void clear_has_error();
    inline void set_has_id();
    inline void clear_has_id();

    ::google::protobuf::UnknownFieldSet _unknown_fields_;

    ::std::string* serialized_response_;
    ::Error* error_;
    ::google::protobuf::uint32 id_;

    mutable int _cached_size_;
    ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

    friend void  protobuf_AddDesc_protobufrpc_2eproto();
    friend void protobuf_AssignDesc_protobufrpc_2eproto();
    friend void protobuf_ShutdownFile_protobufrpc_2eproto();

    void InitAsDefaultInstance();
    static Response* default_instance_;
};
// ===================================================================


// ===================================================================

// Rpc

// repeated .Request request = 1;
inline int Rpc::request_size() const {
    return request_.size();
}
inline void Rpc::clear_request() {
    request_.Clear();
}
inline const ::Request& Rpc::request(int index) const {
    return request_.Get(index);
}
inline ::Request* Rpc::mutable_request(int index) {
    return request_.Mutable(index);
}
inline ::Request* Rpc::add_request() {
    return request_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Request >&
Rpc::request() const {
    return request_;
}
inline ::google::protobuf::RepeatedPtrField< ::Request >*
Rpc::mutable_request() {
    return &request_;
}

// repeated .Response response = 2;
inline int Rpc::response_size() const {
    return response_.size();
}
inline void Rpc::clear_response() {
    response_.Clear();
}
inline const ::Response& Rpc::response(int index) const {
    return response_.Get(index);
}
inline ::Response* Rpc::mutable_response(int index) {
    return response_.Mutable(index);
}
inline ::Response* Rpc::add_response() {
    return response_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Response >&
Rpc::response() const {
    return response_;
}
inline ::google::protobuf::RepeatedPtrField< ::Response >*
Rpc::mutable_response() {
    return &response_;
}

// -------------------------------------------------------------------

// Request

// required string method = 1;
inline bool Request::has_method() const {
    return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::set_has_method() {
    _has_bits_[0] |= 0x00000001u;
}
inline void Request::clear_has_method() {
    _has_bits_[0] &= ~0x00000001u;
}
inline void Request::clear_method() {
    if (method_ != &::google::protobuf::internal::kEmptyString) {
        method_->clear();
    }
    clear_has_method();
}
inline const ::std::string& Request::method() const {
    return *method_;
}
inline void Request::set_method(const ::std::string& value) {
    set_has_method();
    if (method_ == &::google::protobuf::internal::kEmptyString) {
        method_ = new ::std::string;
    }
    method_->assign(value);
}
inline void Request::set_method(const char* value) {
    set_has_method();
    if (method_ == &::google::protobuf::internal::kEmptyString) {
        method_ = new ::std::string;
    }
    method_->assign(value);
}
inline void Request::set_method(const char* value, size_t size) {
    set_has_method();
    if (method_ == &::google::protobuf::internal::kEmptyString) {
        method_ = new ::std::string;
    }
    method_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_method() {
    set_has_method();
    if (method_ == &::google::protobuf::internal::kEmptyString) {
        method_ = new ::std::string;
    }
    return method_;
}
inline ::std::string* Request::release_method() {
    clear_has_method();
    if (method_ == &::google::protobuf::internal::kEmptyString) {
        return NULL;
    } else {
        ::std::string* temp = method_;
        method_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
        return temp;
    }
}
inline void Request::set_allocated_method(::std::string* method) {
    if (method_ != &::google::protobuf::internal::kEmptyString) {
        delete method_;
    }
    if (method) {
        set_has_method();
        method_ = method;
    } else {
        clear_has_method();
        method_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    }
}

// optional bytes serialized_request = 2;
inline bool Request::has_serialized_request() const {
    return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request::set_has_serialized_request() {
    _has_bits_[0] |= 0x00000002u;
}
inline void Request::clear_has_serialized_request() {
    _has_bits_[0] &= ~0x00000002u;
}
inline void Request::clear_serialized_request() {
    if (serialized_request_ != &::google::protobuf::internal::kEmptyString) {
        serialized_request_->clear();
    }
    clear_has_serialized_request();
}
inline const ::std::string& Request::serialized_request() const {
    return *serialized_request_;
}
inline void Request::set_serialized_request(const ::std::string& value) {
    set_has_serialized_request();
    if (serialized_request_ == &::google::protobuf::internal::kEmptyString) {
        serialized_request_ = new ::std::string;
    }
    serialized_request_->assign(value);
}
inline void Request::set_serialized_request(const char* value) {
    set_has_serialized_request();
    if (serialized_request_ == &::google::protobuf::internal::kEmptyString) {
        serialized_request_ = new ::std::string;
    }
    serialized_request_->assign(value);
}
inline void Request::set_serialized_request(const void* value, size_t size) {
    set_has_serialized_request();
    if (serialized_request_ == &::google::protobuf::internal::kEmptyString) {
        serialized_request_ = new ::std::string;
    }
    serialized_request_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_serialized_request() {
    set_has_serialized_request();
    if (serialized_request_ == &::google::protobuf::internal::kEmptyString) {
        serialized_request_ = new ::std::string;
    }
    return serialized_request_;
}
inline ::std::string* Request::release_serialized_request() {
    clear_has_serialized_request();
    if (serialized_request_ == &::google::protobuf::internal::kEmptyString) {
        return NULL;
    } else {
        ::std::string* temp = serialized_request_;
        serialized_request_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
        return temp;
    }
}
inline void Request::set_allocated_serialized_request(::std::string* serialized_request) {
    if (serialized_request_ != &::google::protobuf::internal::kEmptyString) {
        delete serialized_request_;
    }
    if (serialized_request) {
        set_has_serialized_request();
        serialized_request_ = serialized_request;
    } else {
        clear_has_serialized_request();
        serialized_request_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    }
}

// optional uint32 id = 3;
inline bool Request::has_id() const {
    return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Request::set_has_id() {
    _has_bits_[0] |= 0x00000004u;
}
inline void Request::clear_has_id() {
    _has_bits_[0] &= ~0x00000004u;
}
inline void Request::clear_id() {
    id_ = 0u;
    clear_has_id();
}
inline ::google::protobuf::uint32 Request::id() const {
    return id_;
}
inline void Request::set_id(::google::protobuf::uint32 value) {
    set_has_id();
    id_ = value;
}

// -------------------------------------------------------------------

// Error

// required sint32 code = 1;
inline bool Error::has_code() const {
    return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Error::set_has_code() {
    _has_bits_[0] |= 0x00000001u;
}
inline void Error::clear_has_code() {
    _has_bits_[0] &= ~0x00000001u;
}
inline void Error::clear_code() {
    code_ = 0;
    clear_has_code();
}
inline ::google::protobuf::int32 Error::code() const {
    return code_;
}
inline void Error::set_code(::google::protobuf::int32 value) {
    set_has_code();
    code_ = value;
}

// optional string text = 2;
inline bool Error::has_text() const {
    return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Error::set_has_text() {
    _has_bits_[0] |= 0x00000002u;
}
inline void Error::clear_has_text() {
    _has_bits_[0] &= ~0x00000002u;
}
inline void Error::clear_text() {
    if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
    }
    clear_has_text();
}
inline const ::std::string& Error::text() const {
    return *text_;
}
inline void Error::set_text(const ::std::string& value) {
    set_has_text();
    if (text_ == &::google::protobuf::internal::kEmptyString) {
        text_ = new ::std::string;
    }
    text_->assign(value);
}
inline void Error::set_text(const char* value) {
    set_has_text();
    if (text_ == &::google::protobuf::internal::kEmptyString) {
        text_ = new ::std::string;
    }
    text_->assign(value);
}
inline void Error::set_text(const char* value, size_t size) {
    set_has_text();
    if (text_ == &::google::protobuf::internal::kEmptyString) {
        text_ = new ::std::string;
    }
    text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Error::mutable_text() {
    set_has_text();
    if (text_ == &::google::protobuf::internal::kEmptyString) {
        text_ = new ::std::string;
    }
    return text_;
}
inline ::std::string* Error::release_text() {
    clear_has_text();
    if (text_ == &::google::protobuf::internal::kEmptyString) {
        return NULL;
    } else {
        ::std::string* temp = text_;
        text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
        return temp;
    }
}
inline void Error::set_allocated_text(::std::string* text) {
    if (text_ != &::google::protobuf::internal::kEmptyString) {
        delete text_;
    }
    if (text) {
        set_has_text();
        text_ = text;
    } else {
        clear_has_text();
        text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    }
}

// -------------------------------------------------------------------

// Response

// optional bytes serialized_response = 1;
inline bool Response::has_serialized_response() const {
    return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response::set_has_serialized_response() {
    _has_bits_[0] |= 0x00000001u;
}
inline void Response::clear_has_serialized_response() {
    _has_bits_[0] &= ~0x00000001u;
}
inline void Response::clear_serialized_response() {
    if (serialized_response_ != &::google::protobuf::internal::kEmptyString) {
        serialized_response_->clear();
    }
    clear_has_serialized_response();
}
inline const ::std::string& Response::serialized_response() const {
    return *serialized_response_;
}
inline void Response::set_serialized_response(const ::std::string& value) {
    set_has_serialized_response();
    if (serialized_response_ == &::google::protobuf::internal::kEmptyString) {
        serialized_response_ = new ::std::string;
    }
    serialized_response_->assign(value);
}
inline void Response::set_serialized_response(const char* value) {
    set_has_serialized_response();
    if (serialized_response_ == &::google::protobuf::internal::kEmptyString) {
        serialized_response_ = new ::std::string;
    }
    serialized_response_->assign(value);
}
inline void Response::set_serialized_response(const void* value, size_t size) {
    set_has_serialized_response();
    if (serialized_response_ == &::google::protobuf::internal::kEmptyString) {
        serialized_response_ = new ::std::string;
    }
    serialized_response_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Response::mutable_serialized_response() {
    set_has_serialized_response();
    if (serialized_response_ == &::google::protobuf::internal::kEmptyString) {
        serialized_response_ = new ::std::string;
    }
    return serialized_response_;
}
inline ::std::string* Response::release_serialized_response() {
    clear_has_serialized_response();
    if (serialized_response_ == &::google::protobuf::internal::kEmptyString) {
        return NULL;
    } else {
        ::std::string* temp = serialized_response_;
        serialized_response_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
        return temp;
    }
}
inline void Response::set_allocated_serialized_response(::std::string* serialized_response) {
    if (serialized_response_ != &::google::protobuf::internal::kEmptyString) {
        delete serialized_response_;
    }
    if (serialized_response) {
        set_has_serialized_response();
        serialized_response_ = serialized_response;
    } else {
        clear_has_serialized_response();
        serialized_response_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    }
}

// optional .Error error = 2;
inline bool Response::has_error() const {
    return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Response::set_has_error() {
    _has_bits_[0] |= 0x00000002u;
}
inline void Response::clear_has_error() {
    _has_bits_[0] &= ~0x00000002u;
}
inline void Response::clear_error() {
    if (error_ != NULL) error_->::Error::Clear();
    clear_has_error();
}
inline const ::Error& Response::error() const {
    return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::Error* Response::mutable_error() {
    set_has_error();
    if (error_ == NULL) error_ = new ::Error;
    return error_;
}
inline ::Error* Response::release_error() {
    clear_has_error();
    ::Error* temp = error_;
    error_ = NULL;
    return temp;
}
inline void Response::set_allocated_error(::Error* error) {
    delete error_;
    error_ = error;
    if (error) {
        set_has_error();
    } else {
        clear_has_error();
    }
}

// required uint32 id = 3;
inline bool Response::has_id() const {
    return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Response::set_has_id() {
    _has_bits_[0] |= 0x00000004u;
}
inline void Response::clear_has_id() {
    _has_bits_[0] &= ~0x00000004u;
}
inline void Response::clear_id() {
    id_ = 0u;
    clear_has_id();
}
inline ::google::protobuf::uint32 Response::id() const {
    return id_;
}
inline void Response::set_id(::google::protobuf::uint32 value) {
    set_has_id();
    id_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
    namespace protobuf {


    }  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protobufrpc_2eproto__INCLUDED
