// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "kv.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace kv;

class kvHandler : virtual public kvIf {
 public:
  kvHandler() {
    // Your initialization goes here
  }

  ResponseCode::type ping() {
    // Your implementation goes here
    printf("ping\n");
  }

  void get(RecordResponse& _return, const std::string& key) {
    // Your implementation goes here
    printf("get\n");
  }

  ResponseCode::type put(const std::string& key, const std::string& value) {
    // Your implementation goes here
    printf("put\n");
  }

  ResponseCode::type remove(const std::string& key) {
    // Your implementation goes here
    printf("remove\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<kvHandler> handler(new kvHandler());
  shared_ptr<TProcessor> processor(new kvProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

