// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "gen-cpp/BookServlet.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::xunlei;

class BookServletHandler : virtual public BookServletIf {
public:
    BookServletHandler() {
        // Your initialization goes here
    }

    bool Sender(const std::vector< ::xunlei::Book_Info> & books) {
        // Your implementation goes here
        std::vector< ::xunlei::Book_Info>::const_iterator begin = books.begin();
        while (begin != books.end()) {
            printf("book_name: %s\n", (begin->book_name).c_str());
            printf("book_author: %s\n", (begin->book_author).c_str());
            printf("book_price: %f\n", begin->book_price);
            begin++;
        }
        printf("Sender\n");
    }

    void Sender2(const std::vector< ::xunlei::Book_Info> & books) {
        // Your implementation goes here
        std::vector< ::xunlei::Book_Info>::const_iterator begin = books.begin();
        while (begin != books.end()) {
            printf("book_name: %s\n", (begin->book_name).c_str());
            printf("book_author: %s\n", (begin->book_author).c_str());
            printf("book_price: %f\n", begin->book_price);
            begin++;
        }
        printf("Sender2\n");
    }

};

int main(int argc, char **argv) {
    int port = 9090;
    shared_ptr<BookServletHandler> handler(new BookServletHandler());
    //Processsor implements RPC
    shared_ptr<TProcessor> processor(new BookServletProcessor(handler));
    shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
    shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
    shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

    TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
    server.serve();
    return 0;
}

